//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Project")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        DataEntityTier.AFTDataSet.usersDataTable GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.usersDataTable> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdminGetUsers", ReplyAction="http://tempuri.org/IService1/AdminGetUsersResponse")]
        DataEntityTier.AFTDataSet.usersDataTable AdminGetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdminGetUsers", ReplyAction="http://tempuri.org/IService1/AdminGetUsersResponse")]
        System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.usersDataTable> AdminGetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/user_creating", ReplyAction="http://tempuri.org/IService1/user_creatingResponse")]
        void user_creating(string username, string password, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/user_creating", ReplyAction="http://tempuri.org/IService1/user_creatingResponse")]
        System.Threading.Tasks.Task user_creatingAsync(string username, string password, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/user_removing", ReplyAction="http://tempuri.org/IService1/user_removingResponse")]
        void user_removing(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/user_removing", ReplyAction="http://tempuri.org/IService1/user_removingResponse")]
        System.Threading.Tasks.Task user_removingAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEducational_Contracts", ReplyAction="http://tempuri.org/IService1/GetEducational_ContractsResponse")]
        DataEntityTier.AFTDataSet.Educational_contractDataTable GetEducational_Contracts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEducational_Contracts", ReplyAction="http://tempuri.org/IService1/GetEducational_ContractsResponse")]
        System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.Educational_contractDataTable> GetEducational_ContractsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStudents", ReplyAction="http://tempuri.org/IService1/GetAllStudentsResponse")]
        DataEntityTier.AFTDataSet.StudentDataTable GetAllStudents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllStudents", ReplyAction="http://tempuri.org/IService1/GetAllStudentsResponse")]
        System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.StudentDataTable> GetAllStudentsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPrices", ReplyAction="http://tempuri.org/IService1/GetAllPricesResponse")]
        DataEntityTier.AFTDataSet.PriceDataTable GetAllPrices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPrices", ReplyAction="http://tempuri.org/IService1/GetAllPricesResponse")]
        System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.PriceDataTable> GetAllPricesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/up_price", ReplyAction="http://tempuri.org/IService1/up_priceResponse")]
        bool up_price(string Speciality, int Procent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/up_price", ReplyAction="http://tempuri.org/IService1/up_priceResponse")]
        System.Threading.Tasks.Task<bool> up_priceAsync(string Speciality, int Procent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/good_student", ReplyAction="http://tempuri.org/IService1/good_studentResponse")]
        bool good_student(string Surname, string Groupe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/good_student", ReplyAction="http://tempuri.org/IService1/good_studentResponse")]
        System.Threading.Tasks.Task<bool> good_studentAsync(string Surname, string Groupe);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/bad_student", ReplyAction="http://tempuri.org/IService1/bad_studentResponse")]
        string bad_student(string Speciality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/bad_student", ReplyAction="http://tempuri.org/IService1/bad_studentResponse")]
        System.Threading.Tasks.Task<string> bad_studentAsync(string Speciality);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Client.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Client.ServiceReference1.IService1>, Client.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Client.ServiceReference1.CompositeType GetDataUsingDataContract(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(Client.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public DataEntityTier.AFTDataSet.usersDataTable GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.usersDataTable> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public DataEntityTier.AFTDataSet.usersDataTable AdminGetUsers() {
            return base.Channel.AdminGetUsers();
        }
        
        public System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.usersDataTable> AdminGetUsersAsync() {
            return base.Channel.AdminGetUsersAsync();
        }
        
        public void user_creating(string username, string password, string type) {
            base.Channel.user_creating(username, password, type);
        }
        
        public System.Threading.Tasks.Task user_creatingAsync(string username, string password, string type) {
            return base.Channel.user_creatingAsync(username, password, type);
        }
        
        public void user_removing(string username) {
            base.Channel.user_removing(username);
        }
        
        public System.Threading.Tasks.Task user_removingAsync(string username) {
            return base.Channel.user_removingAsync(username);
        }
        
        public DataEntityTier.AFTDataSet.Educational_contractDataTable GetEducational_Contracts() {
            return base.Channel.GetEducational_Contracts();
        }
        
        public System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.Educational_contractDataTable> GetEducational_ContractsAsync() {
            return base.Channel.GetEducational_ContractsAsync();
        }
        
        public DataEntityTier.AFTDataSet.StudentDataTable GetAllStudents() {
            return base.Channel.GetAllStudents();
        }
        
        public System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.StudentDataTable> GetAllStudentsAsync() {
            return base.Channel.GetAllStudentsAsync();
        }
        
        public DataEntityTier.AFTDataSet.PriceDataTable GetAllPrices() {
            return base.Channel.GetAllPrices();
        }
        
        public System.Threading.Tasks.Task<DataEntityTier.AFTDataSet.PriceDataTable> GetAllPricesAsync() {
            return base.Channel.GetAllPricesAsync();
        }
        
        public bool up_price(string Speciality, int Procent) {
            return base.Channel.up_price(Speciality, Procent);
        }
        
        public System.Threading.Tasks.Task<bool> up_priceAsync(string Speciality, int Procent) {
            return base.Channel.up_priceAsync(Speciality, Procent);
        }
        
        public bool good_student(string Surname, string Groupe) {
            return base.Channel.good_student(Surname, Groupe);
        }
        
        public System.Threading.Tasks.Task<bool> good_studentAsync(string Surname, string Groupe) {
            return base.Channel.good_studentAsync(Surname, Groupe);
        }
        
        public string bad_student(string Speciality) {
            return base.Channel.bad_student(Speciality);
        }
        
        public System.Threading.Tasks.Task<string> bad_studentAsync(string Speciality) {
            return base.Channel.bad_studentAsync(Speciality);
        }
    }
}
